{"ast":null,"code":"var _jsxFileName = \"/Users/nathanielmosco/CODE/Build-Week/Week-2-Weight-Lifting-Again/WL_FrontEnd/workout/src/components/AddExercise.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport axiosWithAuth from \"../utils/axiosWithAuth\";\nimport '../index.css';\n\nfunction AddExercise({\n  values,\n  errors,\n  touched,\n  status\n}) {\n  return React.createElement(React.Fragment, null, React.createElement(Form, {\n    className: \"form\",\n    autoComplete: \"on\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"exercisename\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Enter Exercise Name:\"), React.createElement(Field, {\n    className: \"form field\",\n    id: \"exercisename\",\n    type: \"text\",\n    name: \"exercisename\",\n    placeholder: \"Squats\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"weightlifted\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Enter Exercise Weight:\"), React.createElement(Field, {\n    className: \"form field\",\n    id: \"weightlifted\",\n    type: \"text\",\n    name: \"weightlifted\",\n    placeholder: \"Enter amount in lbs/kg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"reps\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Enter Sets X Reps\"), React.createElement(Field, {\n    className: \"form field\",\n    id: \"reps\",\n    type: \"text\",\n    name: \"reps\",\n    placeholder: \"Sets X Reps\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"restperiod\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Enter Rest Time\"), React.createElement(Field, {\n    className: \"form field\",\n    id: \"restperiod\",\n    type: \"text\",\n    name: \"restperiod\",\n    placeholder: \"Enter rest time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Select Target Muscle Group:\", React.createElement(Field, {\n    component: \"select\",\n    name: \"exerciseregion\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"default\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Pick A Group\"), React.createElement(\"option\", {\n    value: \"aerobic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Aerobic\"), React.createElement(\"option\", {\n    value: \"arms\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Arms\"), React.createElement(\"option\", {\n    value: \"core\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Core\"), React.createElement(\"option\", {\n    value: \"legs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Legs\"), React.createElement(\"option\", {\n    value: \"stretches\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Stretches\"), React.createElement(\"option\", {\n    value: \"upperBody\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Upper Body\"))), React.createElement(Link, {\n    to: \"/today\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"form button\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Submit Exercise\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, touched.exercisename && errors.exercisename && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, errors.exercisename), touched.weightlifted && errors.weightlifted && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, errors.weightlifted), touched.reps && errors.reps && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, errors.reps), touched.restperiod && errors.restperiod && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, errors.restperiod), touched.exerciseregion && errors.exerciseregion && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, errors.exerciseregion)));\n}\n\nconst FormikAddExercise = withFormik({\n  validationSchema: Yup.object().shape({\n    exercisename: Yup.string().required(\"Exercise name required.\"),\n    weightlifted: Yup.string().required(\"Enter 0 if body-weight exercise.\"),\n    reps: Yup.string().required(\"Number of sets/reps required\"),\n    restperiod: Yup.string().required(\"If no rest enter 0\")\n  }),\n\n  mapPropsToValues({\n    exercisename,\n    weightlifted,\n    reps,\n    restperiod,\n    exerciseregion\n  }) {\n    return {\n      exercisename: exercisename || \"\",\n      weightlifted: weightlifted || \"\",\n      reps: reps || \"\",\n      restperiod: restperiod || \"\",\n      exerciseregion: exerciseregion || \"\"\n    };\n  },\n\n  handleSubmit(values, {\n    setStatus,\n    resetForm,\n    workoutid\n  }) {\n    console.log(\"is the handle submit working on click?\");\n    console.log(values);\n    const bodyData = new FormData();\n    bodyData.set(\"exercisename\", values.exercisename);\n    bodyData.set(\"weightlifted\", values.weightlifted);\n    bodyData.set(\"reps\", values.reps);\n    bodyData.set(\"restperiod\", values.restperiod);\n    bodyData.set(\"exerciseregion\", values.exerciseregion);\n    bodyData.set(\"grant_type\", \"password\");\n    axiosWithAuth().post(\"https://lifting-weights-java.herokuapp.com/workouts/\".concat(workoutid), bodyData, {\n      headers: {\n        Authorization: \"Basic \".concat(btoa(\"pl,mkoijn:pl,mkoijn\")),\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(results => {\n      console.log(\"result of post within handleSubmit in AddExercise.js\", results);\n      setStatus(results.data);\n      resetForm();\n    }).catch(error => {\n      console.log(\"error, did not post data correctly\", error.response);\n    });\n    console.log(\"looking for values\", values);\n  }\n\n})(AddExercise);\nconsole.log(\"This is the Data\", FormikAddExercise);\nexport default FormikAddExercise;","map":{"version":3,"sources":["/Users/nathanielmosco/CODE/Build-Week/Week-2-Weight-Lifting-Again/WL_FrontEnd/workout/src/components/AddExercise.js"],"names":["React","useEffect","useState","Link","styled","withFormik","Form","Field","ErrorMessage","Yup","axiosWithAuth","AddExercise","values","errors","touched","status","exercisename","weightlifted","reps","restperiod","exerciseregion","FormikAddExercise","validationSchema","object","shape","string","required","mapPropsToValues","handleSubmit","setStatus","resetForm","workoutid","console","log","bodyData","FormData","set","post","headers","Authorization","btoa","then","results","data","catch","error","response"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\"\nimport styled from \"styled-components\";\nimport { withFormik, Form, Field, ErrorMessage, } from \"formik\"\nimport * as Yup from \"yup\";\nimport axiosWithAuth from \"../utils/axiosWithAuth\";\nimport '../index.css';\n\n\nfunction AddExercise({ values, errors, touched, status }) {\n\n\n    return (\n        <>\n            <Form className=\"form\" autoComplete=\"on\">\n                <label htmlFor=\"exercisename\">Enter Exercise Name:</label>\n                <Field className=\"form field\" id=\"exercisename\" type=\"text\" name=\"exercisename\" placeholder=\"Squats\" />\n                <label htmlFor=\"weightlifted\">Enter Exercise Weight:</label>\n                <Field className=\"form field\" id=\"weightlifted\" type=\"text\" name=\"weightlifted\" placeholder=\"Enter amount in lbs/kg\" />\n                <label htmlFor=\"reps\">Enter Sets X Reps</label>\n                <Field className=\"form field\" id=\"reps\" type=\"text\" name=\"reps\" placeholder=\"Sets X Reps\" />\n                <label htmlFor=\"restperiod\">Enter Rest Time</label>\n                <Field className=\"form field\" id=\"restperiod\" type=\"text\" name=\"restperiod\" placeholder=\"Enter rest time\" />\n\n                {/* <label htmlFor=\"exerciseRegion\">Target Muscle Group:</label>\n                <Field className=\"form field\" id=\"exerciseRegion\" type=\"text\" name=\"exerciseRegion\" placeholder=\"Ex: Legs/Arms/Triceps\"/> */}\n                <label>\n                    Select Target Muscle Group:\n                    <Field component=\"select\" name=\"exerciseregion\">\n                        <option value=\"default\">Pick A Group</option>\n                        <option value=\"aerobic\">Aerobic</option>\n                        <option value=\"arms\">Arms</option>\n                        <option value=\"core\">Core</option>\n                        <option value=\"legs\">Legs</option>\n                        <option value=\"stretches\">Stretches</option>\n                        <option value=\"upperBody\">Upper Body</option>\n                    </Field>\n                </label>\n                <Link to=\"/today\">\n                </Link>\n                    <button className=\"form button\" type=\"submit\">Submit Exercise</button>\n\n            </Form>\n            <div>\n                {touched.exercisename && errors.exercisename && (<p className=\"error\">{errors.exercisename}</p>)}\n                {touched.weightlifted && errors.weightlifted && (<p className=\"error\">{errors.weightlifted}</p>)}\n                {touched.reps && errors.reps && (<p className=\"error\">{errors.reps}</p>)}\n                {touched.restperiod && errors.restperiod && (<p className=\"error\">{errors.restperiod}</p>)}\n                {touched.exerciseregion && errors.exerciseregion && (<p className=\"error\">{errors.exerciseregion}</p>)}\n            </div>\n        </>\n    );\n}\n\nconst FormikAddExercise = withFormik({\n    validationSchema: Yup.object().shape({\n        exercisename: Yup.string().required(\"Exercise name required.\"),\n        weightlifted: Yup.string().required(\"Enter 0 if body-weight exercise.\"),\n        reps: Yup.string().required(\"Number of sets/reps required\"),\n        restperiod: Yup.string().required(\"If no rest enter 0\")\n    }),\n    mapPropsToValues({ exercisename, weightlifted, reps, restperiod, exerciseregion }) {\n        return {\n            exercisename: exercisename || \"\",\n            weightlifted: weightlifted || \"\",\n            reps: reps || \"\",\n            restperiod: restperiod || \"\",\n            exerciseregion: exerciseregion || \"\"\n        };\n    },\n    handleSubmit(values, { setStatus, resetForm, workoutid }) {\n        console.log(\"is the handle submit working on click?\")\n        console.log(values);\n        const bodyData = new FormData();\n        bodyData.set(\"exercisename\", values.exercisename);\n        bodyData.set(\"weightlifted\", values.weightlifted);\n        bodyData.set(\"reps\", values.reps);\n        bodyData.set(\"restperiod\", values.restperiod);\n        bodyData.set(\"exerciseregion\", values.exerciseregion);\n        bodyData.set(\"grant_type\", \"password\");\n        axiosWithAuth()\n            .post(`https://lifting-weights-java.herokuapp.com/workouts/${workoutid}`, bodyData, {\n                headers: {\n                    Authorization: `Basic ${btoa(\"pl,mkoijn:pl,mkoijn\")}`,\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                }\n            })\n            .then(results => {\n                console.log(\"result of post within handleSubmit in AddExercise.js\", results)\n                setStatus(results.data);\n                resetForm();\n            })\n            .catch(error => {\n                console.log(\"error, did not post data correctly\", error.response)\n            })\n        console.log(\"looking for values\", values)\n\n    }\n})(AddExercise);\n\nconsole.log(\"This is the Data\", FormikAddExercise)\n\nexport default FormikAddExercise;"]},"metadata":{},"sourceType":"module"}